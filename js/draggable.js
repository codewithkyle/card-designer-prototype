class o extends HTMLElement{constructor(){super();this.handleMouseDown=e=>{this.moving=!0,e instanceof MouseEvent?(this.pos3=e.clientX,this.pos4=e.clientY):e instanceof TouchEvent&&(this.pos3=e.touches[0].clientX,this.pos4=e.touches[0].clientY)};this.handleMouseUp=()=>{this.moving=!1,this.parentElement.parentElement.setAttribute("moving","false")};this.handleMouseMove=e=>{if(this.moving){e instanceof MouseEvent?(this.pos1=this.pos3-e.clientX,this.pos2=this.pos4-e.clientY,this.pos3=e.clientX,this.pos4=e.clientY):e instanceof TouchEvent&&(this.pos1=this.pos3-e.touches[0].clientX,this.pos2=this.pos4-e.touches[0].clientY,this.pos3=e.touches[0].clientX,this.pos4=e.touches[0].clientY);const t=this.parentElement.parentElement,a=t.getBoundingClientRect();let s=parseInt(t.dataset.top)-this.pos2,n=parseInt(t.dataset.left)-this.pos1;t.style.transform=`translate(${n}px, ${s}px)`,t.setAttribute("moving","true"),t.dataset.top=`${s}`,t.dataset.left=`${n}`}};this.moving=!1,this.pos1=0,this.pos2=0,this.pos3=0,this.pos4=0}connectedCallback(){window.addEventListener("mouseup",this.handleMouseUp),window.addEventListener("mousemove",this.handleMouseMove),window.addEventListener("mouseleave",this.handleMouseMove),window.addEventListener("mouseout",this.handleMouseMove),window.addEventListener("mouseleave",this.handleMouseUp),window.addEventListener("touchend",this.handleMouseUp),window.addEventListener("touchmove",this.handleMouseMove),window.addEventListener("touchcancel",this.handleMouseMove),this.addEventListener("mousedown",this.handleMouseDown),this.addEventListener("touchstart",this.handleMouseDown)}}export{o as default};
